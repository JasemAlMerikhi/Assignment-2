class Ebook:
    """
    Represents an e-book with title, author, publication date, genre, and price.
    """

    def __init__(self, title, author, publication_date, genre, price):
        self.__title = title
        self.__author = author
        self.__publication_date = publication_date
        self.__genre = genre
        self.__price = price

    def get_details(self):
        return f"Title: {self.__title}, Author: {self.__author}, Genre: {self.__genre}, Price: ${self.__price:.2f}"

    def __str__(self):
        return self.get_details()

    def get_price(self):
        return self.__price


class Customer:
    """
    Represents a customer with name, contact information, and loyalty membership status.
    Each customer has an associated shopping cart.
    """

    def __init__(self, name, contact_info, loyalty_member=False):
        self.__name = name
        self.__contact_info = contact_info
        self.__loyalty_member = loyalty_member
        self.shopping_cart = ShoppingCart()

    def __str__(self):
        return f"Customer: {self.__name}, Contact Info: {self.__contact_info}, Loyalty Member: {self.__loyalty_member}"

class ShoppingCart:
    """
    Represents a shopping cart containing e-books for purchase.
    """

    def __init__(self):
        self._items = []

    def add_item(self, ebook):
        self._items.append(ebook)

    def get_total_price(self):
        return sum(item.get_price() for item in self._items)

    def __str__(self):
        items_str = "\n".join([str(item) for item in self._items])
        return f"\nShopping Cart:\n{'-'*20}\n{items_str}\n{'-'*20}\nTotal Price: ${self.get_total_price():.2f}"

class Order:
    """
    Represents a finalized order, containing the order date, items, and total price.
    """

    def __init__(self, order_date, items):
        self.__order_date = order_date
        self._items = items
        self.__total_price = self.calculate_total()

    def calculate_total(self):
        return sum(item.get_price() for item in self._items)

    def __str__(self):
        items_str = "\n".join([str(item) for item in self._items])
        return f"\nOrder Summary:\n{'='*20}\nOrder Date: {self.__order_date}\nItems:\n{items_str}\n{'-'*20}\nTotal Price: ${self.__total_price:.2f}\n{'='*20}"

class Discount:
    """
    Represents a discount that can be applied to an order.
    """

    def __init__(self, discount_type, discount_rate):
        self.__discount_type = discount_type
        self.__discount_rate = discount_rate

    def apply_discount(self, order):
        return order.calculate_total() * (1 - self.__discount_rate)

class Invoice:
    """
    Represents an invoice for an order, including VAT.
    """
    VAT_RATE = 0.08  # 8% VAT

    def __init__(self, order):
        self.__order = order
        self.__total_with_vat = self.calculate_total_with_vat()

    def calculate_total_with_vat(self):
        return self.__order.calculate_total() * (1 + self.VAT_RATE)

    def __str__(self):
     items_str = "\n".join([str(item) for item in self.__order._items])
        return f"\nInvoice:\n{'='*20}\nOrder Details:\n{items_str}\n{'-'*20}\nTotal with VAT: ${self.__total_with_vat:.2f}\n{'='*20}"

